import asyncio
import hashlib
import os
import random
import io
from telethon import TelegramClient, events, Button
from sqlalchemy import create_engine, Column, Integer, String, Boolean, ForeignKey, Float, DateTime
from sqlalchemy.orm import sessionmaker, relationship, declarative_base
import datetime
from PIL import Image

from SECRETS import API_ID, API_HASH, BOT_TOKEN

DATABASE_URL = "sqlite:///" + os.path.abspath("db.sqlite")
CARDS_FOLDER = "cards_folder"
USUAL_IMG_FOLDER = os.path.join(CARDS_FOLDER, "usual_img")
NON_IMAGE_PATH = os.path.join(USUAL_IMG_FOLDER, "non_image.png")
MAIN_MENU_IMG_PATH = os.path.join(USUAL_IMG_FOLDER, "main_menu.png")
STARS_LEARN_IMG_PATH = os.path.join(USUAL_IMG_FOLDER, "stars_learn.png")
CREATE_NEW_IMG_PATH = os.path.join(USUAL_IMG_FOLDER, "create_new.png")
INFO_IMG_PATH = os.path.join(USUAL_IMG_FOLDER, "info.png")
HOW_TO_USE_IMG_PATH = os.path.join(USUAL_IMG_FOLDER, "how_to_use.png")
MY_ACC_IMG_PATH = os.path.join(USUAL_IMG_FOLDER, "my_acc.png")

if not os.path.exists(CARDS_FOLDER):
    os.makedirs(CARDS_FOLDER)
if not os.path.exists(USUAL_IMG_FOLDER):
    os.makedirs(USUAL_IMG_FOLDER)
    if not os.path.exists(NON_IMAGE_PATH):
        Image.new('RGB', (100, 100), 'white').save(NON_IMAGE_PATH)
    if not os.path.exists(MAIN_MENU_IMG_PATH):
        Image.new('RGB', (100, 100), 'white').save(MAIN_MENU_IMG_PATH)
    if not os.path.exists(STARS_LEARN_IMG_PATH):
        Image.new('RGB', (100, 100), 'white').save(STARS_LEARN_IMG_PATH)
    if not os.path.exists(CREATE_NEW_IMG_PATH):
        Image.new('RGB', (100, 100), 'white').save(CREATE_NEW_IMG_PATH)
    if not os.path.exists(INFO_IMG_PATH):
        Image.new('RGB', (100, 100), 'white').save(INFO_IMG_PATH)
    if not os.path.exists(HOW_TO_USE_IMG_PATH):
        Image.new('RGB', (100, 100), 'white').save(HOW_TO_USE_IMG_PATH)
    if not os.path.exists(MY_ACC_IMG_PATH):
        Image.new('RGB', (100, 100), 'white').save(MY_ACC_IMG_PATH)

Base = declarative_base()


class UserTg(Base):
    __tablename__ = "users_tg"

    id = Column(Integer, primary_key=True)
    username = Column(String)
    admin = Column(Integer, default=0)
    ban = Column(Integer, default=0)
    language = Column(String, default='ru')
    date = Column(DateTime, default=datetime.datetime.now)

    def __repr__(self):
        return f"<UserTg(id={self.id}, username='{self.username}', admin={self.admin}, ban={self.ban}, language='{self.language}', date='{self.date}')>"


class UserBot(Base):
    __tablename__ = "users_bot"

    id = Column(Integer, primary_key=True)
    nick = Column(String, unique=True)
    pass_hash = Column(String)
    count_of_cards = Column(Integer, default=0)
    rank = Column(Integer, default=0)
    premium = Column(DateTime)

    def __repr__(self):
        return f"<UserBot(id={self.id}, nick='{self.nick}', count_of_cards={self.count_of_cards}, rank={self.rank}, premium={self.premium})>"


class Card(Base):
    __tablename__ = "cards"

    id = Column(Integer, primary_key=True)
    name = Column(String)
    translation = Column(String)
    collection = Column(Integer, ForeignKey('collection.id'))
    collection_rel = relationship("Collection", back_populates="cards")
    image_path = Column(String, nullable=True)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

    def __repr__(self):
        return f"<Card(id={self.id}, name='{self.name}', translation='{self.translation}', collection={self.collection})>"


class Collection(Base):
    __tablename__ = "collection"

    id = Column(Integer, primary_key=True)
    owner = Column(Integer)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ owner
    name = Column(String)
    descript = Column(String)
    lang1 = Column(String)  # –Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    lang2 = Column(String)  # –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
    cards = relationship("Card", back_populates="collection_rel")

    def __repr__(self):
        return f"<Collection(id={self.id}, owner={self.owner}, name='{self.name}', descript='{self.descript}, lang1='{self.lang1}, lang2='{self.lang2}')>"


class Review(Base):
    __tablename__ = "reviews"

    id = Column(Integer, primary_key=True)
    id_to = Column(Integer)
    id_from = Column(Integer)
    review = Column(String)
    score = Column(Integer)

    def __repr__(self):
        return f"<Review(id={self.id}, id_to={self.id_to}, id_from={self.id_from}, score={self.score})>"


engine = create_engine(DATABASE_URL)

Base.metadata.create_all(engine)
print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

Session = sessionmaker(bind=engine)
session = Session()

client = TelegramClient('session_name', API_ID, API_HASH)


def hash_password(password):
    hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()
    return hashed_password


def is_password_strong(password):
    if len(password) < 5:
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤."
    if not any(char.isdigit() for char in password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É."
    if not any(char.isalpha() for char in password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É."
    if not any(not char.isalnum() for char in password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª."
    return True, None


texts = {
    'ru': {
        'start_message': "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞:",
        'register_message': "–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!\n\n –ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
        'nickname_request': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        'nickname_taken': "–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:",
        'password_request': "üëå –î–∞–≤–∞–π –æ–±–µ–∑–æ–ø–∞—Å–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:",
        'registration_complete': "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        'main_menu': "üòØ‚ú® –¢—ã –ø–æ–ø–∞–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞!\n \n- –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.",
        'start_learning': "‚úî –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
        'create_module': "‚úî –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å",
        'bot_info': "‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
        'how_to_use': "üò¶ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º",
        'my_account': "üëÄ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç",
        'back_to_main_menu': "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        'my_account_info': "–í–∞—à id - {}\n"
                           "----------------------\n"
                           "–ù–∏–∫–Ω–µ–π–º - {}\n"
                           "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - {}\n"
                           "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ - {}\n"
                           "-------------------------\n"
                           "–†–µ–π—Ç–∏–Ω–≥ - {}\n"
                           "–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {}",
        'how_to_use_info': "- –í –Ω–∞—à–µ–º –±–æ—Ç–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫.\n\nü§û –ù–∞—á–Ω–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ!\n\n- –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –≤—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Å–≤–æ—é –ª–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏, —Ç–∞–∫ –∏ —á—É–∂–∏–µ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–ê–ß–ê–¢–¨ –û–ë–£–ß–ï–ù–ò–ï'.\n\n‚ú® –ó–∞–π–¥—è –≤–æ –≤–∫–ª–∞–¥–∫—É '–ú–û–ô –ê–ö–ö–ê–£–ù–¢', –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –µ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –ø–æ–ª—É—á–∏—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 1 –º–µ—Å—è—Ü, –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, —á—Ç–æ —Ç–æ–∂–µ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–º–æ–∂–µ—Ç –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏! ",
        'support': "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        'start_learning_message': "‚è± –û—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª–æ—Å—å –∂–µ–ª–∞–Ω–∏–µ –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞!\n\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        'my_modules': "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –º–æ–¥—É–ª–∏",
        'other_modules': "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—É–∂–∏–µ –º–æ–¥—É–ª–∏",
        'edit_modules_message': "—Ç—É—Ç —á—Ç–æ —Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ, —è–∫–æ–±—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        'create_module': "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å",
        'edit_existing_module': "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ—é—â–∏–π—Å—è –º–æ–¥—É–ª—å",
        'bot_info_message': "‚Ñπ –ü—Ä–æ–µ–∫—Ç PUZLE ENGLISH LEANING –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ 2025 –≥–æ–¥—É –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤!\n\n–ï–¥–∏–Ω–∞—è —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä—è–º–æ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ Telegram. –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, —ç—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—É—Ç–∏ –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É!",
        'change_language': "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        'register': "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        'change_nickname': "–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫",
        'change_password': "–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å",
        'get_premium': "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º",
        'activate_premium': "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º",
        'enter_new_nickname': "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –Ω—ã–Ω–µ—à–Ω–∏–π –Ω–∏–∫ - {}",
        'nickname_exists': "–ü–æ–¥–æ–±–Ω—ã–π –Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º",
        'enter_old_password': "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—à–ª—ã–π –ø–∞—Ä–æ–ª—å, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏",
        'incorrect_password': "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
        'enter_new_password': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å",
        'premium_link': "https://t.me/telegram",
        'enter_premium_key': "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á, –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞",
        'invalid_premium_key': "‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π –∫–ª—é—á, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
        'nickname_changed': "–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
        'password_changed': "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
        'premium_activated': "–ü—Ä–µ–º–∏—É–º —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {}",
        'premium_activated_message': "–î–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
        'select_original_language': "üëÄ –û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–Ω–∏–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞",
        'select_translation_language': "‚úî –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞",
        'enter_module_name': "üî• –î–∞–≤–∞–π –ø—Ä–∏–¥—É–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è!\n\n–°–æ–≤–µ—Ç—É–µ–º –∏–∑–±–µ–≥–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π, —Ç–∞–∫ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—â—É—é —Ç–µ–º—É —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—à–µ—Ç–µ –≤ –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ. ",
        'enter_module_description': "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è",
        'skip_description': "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        'description_too_long': "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        'module_created_add_cards': "–û—Ç–ª–∏—á–Ω–æ, –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω, –¥–æ–±–∞–≤–∏–º –≤ –Ω–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –Ω–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è?",
        'add_cards': "üíπ –î–æ–±–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏",
        'enter_foreign_word': "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤):",
        'enter_translation': "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤):",
        'add_image_to_card': "–î–æ–±–∞–≤–∏–º –∫ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫—É?",
        'skip': "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        'add': "–î–æ–±–∞–≤–∏–º!",
        'card_saved_add_next': "–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –¥–æ–±–∞–≤–∏–º —Å–ª–µ–¥—É—é—â—É—é –∏–ª–∏ –≤–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
        'add_next_card': "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É",
        'invalid_image_format': "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG –∏–ª–∏ PNG.",
        'module_name_request': "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        'no_modules_found': "–ú–æ–¥—É–ª–µ–π —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞–π–¥–µ–Ω–æ –Ω–µ –±—ã–ª–æ.",
        'modules_found': "–í–æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:",
        'no_cards_in_module': "–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.",
        'card_front': "{}",  # –¢–µ–∫—Å—Ç –¥–ª—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ)
        'card_back': "{}",  # –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–µ—Ä–µ–≤–æ–¥)
        'flip': "–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å",
        'next': "–î–∞–ª–µ–µ",
        'all_cards_passed': "–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏!",
    },
    'en': {
        'start_message': "Hello! Choose a language:",
        'register_message': "Hello! It seems you are not registered yet. Click the button below to register.",
        'nickname_request': "Please enter your nickname:",
        'nickname_taken': "This nickname is already taken. Please choose another:",
        'password_request': "Now enter your password:",
        'registration_complete': "Registration complete!",
        'main_menu': "Main Menu",
        'start_learning': "‚úî Start Learning",
        'create_module': "‚úî Create New Module",
        'bot_info': "‚Ñπ Bot Info",
        'how_to_use': "üò¶ How to Use Bot",
        'my_account': "üëÄ My Account",
        'back_to_main_menu': "‚¨Ö Back to Main Menu",
        'my_account_info': "Your id - {}\n"
                           "----------------------\n"
                           "Nickname - {}\n"
                           "Registration date - {}\n"
                           "Number of created cards - {}\n"
                           "-------------------------\n"
                           "Rating - {}\n"
                           "Premium active until: {}",
        'how_to_use_info': "Here's how to use it",
        'support': "Support",
        'start_learning_message': "Great, let's start",
        'my_modules': "View My Modules",
        'other_modules': "View Other Modules",
        'edit_modules_message': "some instructions here",
        'create_module': "Create New Module",
        'edit_existing_module': "Edit Existing Module",
        'bot_info_message': "Here is info",
        'change_language': "Change language",
        'register': "Register",
        'change_nickname': "Change nickname",
        'change_password': "Change password",
        'get_premium': "Get premium",
        'activate_premium': "Activate premium",
        'enter_new_nickname': "Enter the nickname you want to change your current nickname to - {}",
        'nickname_exists': "This nickname already exists, please enter another nickname",
        'enter_old_password': "Enter your old password to confirm your identity",
        'incorrect_password': "Incorrect password, please try again",
        'enter_new_password': "Enter a new password",
        'premium_link': "https://t.me/telegram",
        'enter_premium_key': "Enter the activation key",
        'invalid_premium_key': "‚ùå Invalid key, please try again",
        'nickname_changed': "Nickname changed successfully",
        'password_changed': "Password changed successfully",
        'premium_activated': "Premium activated successfully until {}",
        'premium_activated_message': "Access for 1 month activated",
        'select_original_language': "Select the language in which the foreign words will be written",
        'select_translation_language': "Select the language into which the words in the module will be translated",
        'enter_module_name': "Enter a name for the module",
        'enter_module_description': "If necessary, enter a description for the new module",
        'skip_description': "Skip",
        'description_too_long': "The description must be no more than 100 characters. Please try again.",
        'module_created_add_cards': "Great, the new module has been created. Do you want to add cards with new words to study?",
        'add_cards': "üíπ Add cards",
        'enter_foreign_word': "Enter a word in a foreign language (maximum 100 characters):",
        'enter_translation': "Enter the translation of the word (maximum 100 characters):",
        'add_image_to_card': "Add an image to this card?",
        'skip': "Skip",
        'add': "Add!",
        'card_saved_add_next': "The card has been successfully saved. Add the next one or return to the main menu?",
        'add_next_card': "Add the next card",
        'invalid_image_format': "Invalid image format. Please send an image in JPEG or PNG format.",
        'module_name_request': "Enter the module name to search:",
        'no_modules_found': "No modules with a similar name were found.",
        'modules_found': "Here are the modules found:",
        'no_cards_in_module': "There are no cards in this module yet.",
        'card_front': "{}",  # –¢–µ–∫—Å—Ç –¥–ª—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ)
        'card_back': "{}",  # –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–µ—Ä–µ–≤–æ–¥)
        'flip': "Flip",
        'next': "Next",
        'all_cards_passed': "You have passed all the cards!",
    },
    'uk': {
        'start_message': "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        'register_message': "–ü—Ä–∏–≤—ñ—Ç! –°—Ö–æ–∂–µ, –≤–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è.",
        'nickname_request': "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω—ñ–∫–Ω–µ–π–º:",
        'nickname_taken': "–¶–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∂–µ –∑–∞–π–Ω—è—Ç–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–µ:",
        'password_request': "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å:",
        'registration_complete': "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        'main_menu': "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        'start_learning': "‚úî –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è",
        'create_module': "‚úî –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–æ–¥—É–ª—å",
        'bot_info': "‚Ñπ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞",
        'how_to_use': "üò¶ –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º",
        'my_account': "üëÄ –ú—ñ–π –∞–∫–∫–∞—É–Ω—Ç",
        'back_to_main_menu': "‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        'my_account_info': "–í–∞—à id - {}\n"
                           "----------------------\n"
                           "–ù—ñ–∫–Ω–µ–π–º - {}\n"
                           "–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó - {}\n"
                           "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫ - {}\n"
                           "-------------------------\n"
                           "–†–µ–π—Ç–∏–Ω–≥ - {}\n"
                           "–ü—Ä–µ–º—ñ—É–º –∞–∫—Ç–∏–≤–Ω–∏–π –¥–æ: {}",
        'how_to_use_info': "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Å—å —Ç–∞–∫",
        'support': "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞",
        'start_learning_message': "–ß—É–¥–æ–≤–æ, –ø–æ—á–Ω—ñ–º–æ",
        'my_modules': "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó –º–æ–¥—É–ª—ñ",
        'other_modules': "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—à—ñ –º–æ–¥—É–ª—ñ",
        'edit_modules_message': "—Ç—É—Ç —â–æ—Å—å –Ω–∞–ø–∏—Å–∞–Ω–æ, –Ω—ñ–±–∏—Ç–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è",
        'create_module': "–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–æ–¥—É–ª—å",
        'edit_existing_module': "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –º–æ–¥—É–ª—å",
        'bot_info_message': "–¢—É—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
        'change_language': "–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
        'register': "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è",
        'change_nickname': "–ó–º—ñ–Ω–∏—Ç–∏ –Ω—ñ–∫",
        'change_password': "–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å",
        'get_premium': "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º",
        'activate_premium': "–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º",
        'enter_new_nickname': "–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º, –Ω–∞ —è–∫–∏–π –í–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π –Ω—ñ–∫ - {}",
        'nickname_exists': "–ü–æ–¥—ñ–±–Ω–∏–π –Ω—ñ–∫ –≤–∂–µ —ñ—Å–Ω—É—î, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –Ω—ñ–∫–Ω–µ–π–º",
        'enter_old_password': "–í–≤–µ–¥—ñ—Ç—å –º–∏–Ω—É–ª–∏–π –ø–∞—Ä–æ–ª—å, –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ",
        'incorrect_password': "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑",
        'enter_new_password': "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å",
        'premium_link': "https://t.me/telegram",
        'enter_premium_key': "–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á, –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –¥–æ—Å—Ç—É–ø—É",
        'invalid_premium_key': "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–ª—é—á, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑",
        'nickname_changed': "–ù—ñ–∫–Ω–µ–π–º —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ",
        'password_changed': "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ",
        'premium_activated': "–ü—Ä–µ–º—ñ—É–º —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–æ {}",
        'premium_activated_message': "–î–æ—Å—Ç—É–ø –Ω–∞ 1 –º—ñ—Å—è—Ü—å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ",
        'select_original_language': "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—ñ–π –±—É–¥—É—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ñ —ñ–Ω–æ–∑–µ–º–Ω—ñ —Å–ª–æ–≤–∞",
        'select_translation_language': "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—É –±—É–¥—É—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω—ñ —Å–ª–æ–≤–∞ –≤ –º–æ–¥—É–ª—ñ",
        'enter_module_name': "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –º–æ–¥—É–ª—è",
        'enter_module_description': "–ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –≤–∫–∞–∂—ñ—Ç—å –æ–ø–∏—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è",
        'skip_description': "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        'description_too_long': "–û–ø–∏—Å –º–∞—î –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        'module_created_add_cards': "–ß—É–¥–æ–≤–æ, –Ω–æ–≤–∏–π –º–æ–¥—É–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ, —á–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è?",
        'add_cards': "üíπ –î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∫–∏",
        'enter_foreign_word': "–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ —ñ–Ω–æ–∑–µ–º–Ω–æ—é –º–æ–≤–æ—é (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤):",
        'enter_translation': "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª–æ–≤–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤):",
        'add_image_to_card': "–î–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –∫–∞—Ä—Ç–∫–∏?",
        'skip': "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
        'add': "–î–æ–¥–∞—Ç–∏!",
        'card_saved_add_next': "–ö–∞—Ä—Ç–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞, –¥–æ–¥–∞—Ç–∏ —â–µ —á–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?",
        'add_next_card': "–î–æ–¥–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –∫–∞—Ä—Ç–∫—É",
        'invalid_image_format': "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ JPEG –∞–±–æ PNG.",
        'module_name_request': "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–æ–¥—É–ª—è –¥–ª—è –ø–æ—à—É–∫—É:",
        'no_modules_found': "–ú–æ–¥—É–ª—ñ–≤ –∑ –ø–æ–¥—ñ–±–Ω–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ –±—É–ª–æ –∑–Ω–∞–π–¥–µ–Ω–æ.",
        'modules_found': "–û—Å—å –∑–Ω–∞–π–¥–µ–Ω—ñ –º–æ–¥—É–ª—ñ:",
        'no_cards_in_module': "–£ —Ü—å–æ–º—É –º–æ–¥—É–ª—ñ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∫–∞—Ä—Ç–æ–∫.",
        'card_front': "{}",  # –¢–µ–∫—Å—Ç –¥–ª—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ)
        'card_back': "{}",  # –¢–µ–∫—Å—Ç –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ –∫–∞—Ä—Ç–∫–∏ (–ø–µ—Ä–µ–∫–ª–∞–¥)
        'flip': "–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏",
        'next': "–î–∞–ª—ñ",
        'all_cards_passed': "–í–∏ –ø—Ä–æ–π—à–ª–∏ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏!",
    },
    'pl': {
        'start_message': "Cze≈õƒá! Wybierz jƒôzyk:",
        'register_message': "Cze≈õƒá! WyglƒÖda na to, ≈ºe nie jeste≈õ jeszcze zarejestrowany. Kliknij przycisk poni≈ºej, aby siƒô zarejestrowaƒá.",
        'nickname_request': "Proszƒô wprowadziƒá sw√≥j pseudonim:",
        'nickname_taken': "Ta nazwa u≈ºytkownika jest ju≈º zajƒôta. Proszƒô wybraƒá innƒÖ:",
        'password_request': "Teraz wprowad≈∫ swoje has≈Ço:",
        'registration_complete': "Rejestracja zako≈Ñczona!",
        'main_menu': "Menu g≈Ç√≥wne",
        'start_learning': "‚úî Rozpocznij naukƒô",
        'create_module': "‚úî Utw√≥rz nowy modu≈Ç",
        'bot_info': "‚Ñπ Informacje o bocie",
        'how_to_use': "üò¶ Jak korzystaƒá z bota",
        'my_account': "üëÄ Moje konto",
        'back_to_main_menu': "‚¨Ö Powr√≥t do menu g≈Ç√≥wnego",
        'my_account_info': "Tw√≥j id - {}\n"
                           "----------------------\n"
                           "Pseudonim - {}\n"
                           "Data rejestracji - {}\n"
                           "Liczba utworzonych kart - {}\n"
                           "-------------------------\n"
                           "Ocena - {}\n"
                           "Premium aktywne do: {}",
        'how_to_use_info': "Aby z niego korzystaƒá, zr√≥b tak",
        'support': "Wsparcie",
        'start_learning_message': "≈öwietnie, zacznijmy",
        'my_modules': "Wy≈õwietl moje modu≈Çy",
        'other_modules': "Wy≈õwietl inne modu≈Çy",
        'edit_modules_message': "tutaj co≈õ jest napisane, rzekomo instrukcja",
        'create_module': "Utw√≥rz nowy modu≈Ç",
        'edit_existing_module': "Edytuj istniejƒÖcy modu≈Ç",
        'bot_info_message': "Tutaj informacje",
        'change_language': "Zmie≈Ñ jƒôzyk",
        'register': "Zarejestruj siƒô",
        'change_nickname': "Zmie≈Ñ pseudonim",
        'change_password': "Zmie≈Ñ has≈Ço",
        'get_premium': "ZdobƒÖd≈∫ premium",
        'activate_premium': "Aktywuj premium",
        'enter_new_nickname': "Wprowad≈∫ pseudonim, na kt√≥ry chcesz zmieniƒá sw√≥j obecny pseudonim - {}",
        'nickname_exists': "Ta nazwa u≈ºytkownika ju≈º istnieje, wprowad≈∫ innƒÖ nazwƒô u≈ºytkownika",
        'enter_old_password': "Wprowad≈∫ stare has≈Ço, aby potwierdziƒá swojƒÖ to≈ºsamo≈õƒá",
        'incorrect_password': "Nieprawid≈Çowe has≈Ço, spr√≥buj ponownie",
        'enter_new_password': "Wprowad≈∫ nowe has≈Ço",
        'premium_link': "https://t.me/telegram",
        'enter_premium_key': "Wprowad≈∫ klucz aktywacyjny",
        'invalid_premium_key': "‚ùå Nieprawid≈Çowy klucz, spr√≥buj ponownie",
        'nickname_changed': "Pseudonim zosta≈Ç pomy≈õlnie zmieniony",
        'password_changed': "Has≈Ço zosta≈Ço pomy≈õlnie zmienione",
        'premium_activated': "Premium aktywowane pomy≈õlnie do {}",
        'premium_activated_message': "Dostƒôp na 1 miesiƒÖ—Ü aktywowano",
        'select_original_language': "Wybierz jƒôzyk, w kt√≥rym zostanƒÖ zapisane s≈Çowa obce",
        'select_translation_language': "Wybierz jƒôzyk, na kt√≥ry zostanƒÖ przet≈Çumaczone s≈Çowa w module",
        'enter_module_name': "Wprowad≈∫ nazwƒô modu≈Çu",
        'enter_module_description': "W razie potrzeby wprowad≈∫ opis nowego modu≈Çu",
        'skip_description': "PominƒÖƒá",
        'description_too_long': "Opis musi mieƒá nie wiƒôcej ni≈º 100 znak√≥w. Proszƒô spr√≥buj ponownie.",
        'module_created_add_cards': "≈öwietnie, nowy modu≈Ç zosta≈Ç utworzony, chcesz dodaƒá karty do nauki?",
        'add_cards': "üíπ Dodaj kartki",
        'enter_foreign_word': "Wprowad≈∫ s≈Çowo w jƒôzyku obcym (maksymalnie 100 znak√≥w):",
        'enter_translation': "Wprowad≈∫ t≈Çumaczenie s≈Çowa (maksymalnie 100 znak√≥w):",
        'add_image_to_card': "Dodaƒá obrazek do karty?",
        'skip': "PominƒÖƒá",
        'add': "Dodaj!",
        'card_saved_add_next': "Karta zosta≈Ça zapisana, dodaƒá nastƒôpnƒÖ czy wr√≥ciƒá do menu g≈Ç√≥wnego?",
        'add_next_card': "Dodaj nastƒôpnƒÖ kartƒô",
        'invalid_image_format': "Nieprawid≈Çowy format obrazu. Proszƒô wys≈Çaƒá obraz w formacie JPEG lub PNG.",
        'module_name_request': "Wprowad≈∫ nazwƒô modu≈Çu do wyszukania:",
        'no_modules_found': "Nie znaleziono modu≈Ç√≥w o podobnej nazwie.",
        'modules_found': "Oto znalezione modu≈Çy:",
        'no_cards_in_module': "W tym module nie ma jeszcze kart.",
        'card_front': "{}",  # –¢–µ–∫—Å—Ç –¥–ª—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ)
        'card_back': "{}",  # –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–µ—Ä–µ–≤–æ–¥)
        'flip': "Obr√≥ƒá",
        'next': "Dalej",
        'all_cards_passed': "Przeszed≈Çe≈õ wszystkie karty!",
    },
    'zh': {
        'start_message': "‰Ω†Â•ΩÔºÅÈÄâÊã©‰∏ÄÁßçËØ≠Ë®ÄÔºö",
        'register_message': "‰Ω†Â•ΩÔºÅ ÁúãÊù•ÊÇ®Â∞öÊú™Ê≥®ÂÜå„ÄÇ ÂçïÂáª‰∏ãÈù¢ÁöÑÊåâÈíÆËøõË°åÊ≥®ÂÜå„ÄÇ",
        'nickname_request': "ËØ∑ËæìÂÖ•‰Ω†ÁöÑÊòµÁß∞Ôºö",
        'nickname_taken': "ËØ•ÊòµÁß∞Â∑≤Ë¢´‰ΩøÁî®„ÄÇ ËØ∑ÈÄâÊã©Âè¶‰∏Ä‰∏™Ôºö",
        'password_request': "Áé∞Âú®ËæìÂÖ•‰Ω†ÁöÑÂØÜÁ†ÅÔºö",
        'registration_complete': "Ê≥®ÂÜåÂÆåÊàêÔºÅ",
        'main_menu': "‰∏ªËèúÂçï",
        'start_learning': "‚úî ÂºÄÂßãÂ≠¶‰π†",
        'create_module': "‚úî ÂàõÂª∫Êñ∞Ê®°Âùó",
        'bot_info': "‚Ñπ Êú∫Âô®‰∫∫‰ø°ÊÅØ",
        'how_to_use': "üò¶ Â¶Ç‰Ωï‰ΩøÁî®Êú∫Âô®‰∫∫",
        'my_account': "üëÄ ÊàëÁöÑÂ∏êÊà∑",
        'back_to_main_menu': "‚¨Ö ËøîÂõû‰∏ªËèúÂçï",
        'my_account_info': "‰Ω†ÁöÑid - {}\n"
                           "----------------------\n"
                           "ÊòµÁß∞ - {}\n"
                           "Ê≥®ÂÜåÊó•Êúü - {}\n"
                           "ÂàõÂª∫ÁöÑÂç°ÁâáÊï∞Èáè - {}\n"
                           "-------------------------\n"
                           "ËØÑÂàÜ - {}\n"
                           "È´òÁ∫ß‰ºöÂëòÊúâÊïàÊúüËá≥Ôºö{}",
        'how_to_use_info': "ËøôÊòØ‰ΩøÁî®ÊñπÊ≥ï",
        'support': "ÊîØÊåÅ",
        'start_learning_message': "Â§™Â•Ω‰∫ÜÔºåËÆ©Êàë‰ª¨ÂºÄÂßãÂêß",
        'my_modules': "Êü•ÁúãÊàëÁöÑÊ®°Âùó",
        'other_modules': "Êü•ÁúãÂÖ∂‰ªñÊ®°Âùó",
        'edit_modules_message': "ËøôÈáåÂÜôÁùÄ‰∏Ä‰∫õ‰∏úË•øÔºåÊçÆËØ¥ÊòØËØ¥Êòé",
        'create_module': "ÂàõÂª∫Êñ∞Ê®°Âùó",
        'edit_existing_module': "ÁºñËæëÁé∞ÊúâÊ®°Âùó",
        'bot_info_message': "ËøôÈáåÊòØ‰ø°ÊÅØ",
        'change_language': "Êõ¥ÊîπËØ≠Ë®Ä",
        'register': "Êä•Âêç",
        'change_nickname': "Êõ¥ÊîπÊòµÁß∞",
        'change_password': "Êõ¥ÊîπÂØÜÁ†Å",
        'get_premium': "Ëé∑ÂæóÈ´òÁ∫ß‰ºöÂëò",
        'activate_premium': "ÊøÄÊ¥ªÈ´òÁ∫ß‰ºöÂëò",
        'enter_new_nickname': "ËæìÂÖ•ÊÇ®Ë¶ÅÊõ¥Êîπ‰∏∫ÂΩìÂâçÊòµÁß∞ÁöÑÊòµÁß∞ - {}",
        'nickname_exists': "Ê≠§ÊòµÁß∞Â∑≤Â≠òÂú®ÔºåËØ∑ËæìÂÖ•Âè¶‰∏Ä‰∏™ÊòµÁß∞",
        'enter_old_password': "ËæìÂÖ•ÊÇ®ÁöÑÊóßÂØÜÁ†Å‰ª•Á°ÆËÆ§ÊÇ®ÁöÑË∫´‰ªΩ",
        'incorrect_password': "ÂØÜÁ†Å‰∏çÊ≠£Á°ÆÔºåËØ∑ÈáçËØï",
        'enter_new_password': "ËæìÂÖ•Êñ∞ÂØÜÁ†Å",
        'premium_link': "https://t.me/telegram",
        'enter_premium_key': "ËæìÂÖ•ÊøÄÊ¥ªÁ†Å",
        'invalid_premium_key': "‚ùå ÂØÜÈí•Êó†ÊïàÔºåËØ∑ÈáçËØï",
        'nickname_changed': "ÊòµÁß∞Â∑≤ÊàêÂäüÊõ¥Êîπ",
        'password_changed': "ÂØÜÁ†ÅÂ∑≤ÊàêÂäüÊõ¥Êîπ",
        'premium_activated': "È´òÁ∫ß‰ºöÂëòÂ∑≤ÊàêÂäüÊøÄÊ¥ªËá≥ {}",
        'premium_activated_message': "1‰∏™ÊúàÁöÑËÆøÈóÆÊùÉÈôêÂ∑≤ÊøÄÊ¥ª",
        'select_original_language': "ÈÄâÊã©Â§ñËØ≠ÂçïËØçÁöÑÁºñÂÜôËØ≠Ë®Ä",
        'select_translation_language': "ÈÄâÊã©Ê®°Âùó‰∏≠ÂçïËØçÁöÑÁøªËØëËØ≠Ë®Ä",
        'enter_module_name': "ËæìÂÖ•Ê®°ÂùóÂêçÁß∞",
        'enter_module_description': "Â¶ÇÊûúÈúÄË¶ÅÔºåËØ∑ËæìÂÖ•Êñ∞Ê®°ÂùóÁöÑÊèèËø∞",
        'skip_description': "Ë∑≥Ëøá",
        'description_too_long': "ÊèèËø∞‰∏çÂæóË∂ÖËøá100‰∏™Â≠óÁ¨¶„ÄÇ ËØ∑ÂÜçËØï‰∏ÄÊ¨°.",
        'module_created_add_cards': "Â§™Â•Ω‰∫ÜÔºåÊñ∞Ê®°ÂùóÂ∑≤ÂàõÂª∫ÔºåË¶ÅÊ∑ªÂä†Âç°ÁâáÊù•Â≠¶‰π†ÂêóÔºü",
        'add_cards': "üíπ Ê∑ªÂä†Âç°Áâá",
        'enter_foreign_word': "ËæìÂÖ•Â§ñËØ≠ÂçïËØç (ÊúÄÂ§ö 100 ‰∏™Â≠óÁ¨¶):",
        'enter_translation': "ËæìÂÖ•ÂçïËØçÁöÑÁøªËØë (ÊúÄÂ§ö 100 ‰∏™Â≠óÁ¨¶):",
        'add_image_to_card': "‰∏∫Ê≠§Âç°Ê∑ªÂä†ÂõæÁâáÔºü",
        'skip': "Ë∑≥Ëøá",
        'add': "Ê∑ªÂä†ÔºÅ",
        'card_saved_add_next': "Âç°ÁâáÂ∑≤ÊàêÂäü‰øùÂ≠òÔºåÊ∑ªÂä†‰∏ã‰∏ÄÂº†ËøòÊòØËøîÂõû‰∏ªËèúÂçïÔºü",
        'add_next_card': "Ê∑ªÂä†‰∏ã‰∏ÄÂº†Âç°Áâá",
        'invalid_image_format': "Êó†ÊïàÁöÑÂõæÂÉèÊ†ºÂºè„ÄÇ ËØ∑ÂèëÈÄÅ JPEG Êàñ PNG Ê†ºÂºèÁöÑÂõæÂÉè„ÄÇ",
        'module_name_request': "ËæìÂÖ•Ë¶ÅÊêúÁ¥¢ÁöÑÊ®°ÂùóÂêçÁß∞Ôºö",
        'no_modules_found': "Êú™ÊâæÂà∞ÂÖ∑ÊúâÁõ∏‰ººÂêçÁß∞ÁöÑÊ®°Âùó„ÄÇ",
        'modules_found': "ËøôÊòØÊâæÂà∞ÁöÑÊ®°ÂùóÔºö",
        'no_cards_in_module': "Ê≠§Ê®°Âùó‰∏≠Â∞öÊó†Âç°Áâá„ÄÇ",
        'card_front': "{}",  # –¢–µ–∫—Å—Ç –¥–ª—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ)
        'card_back': "{}",  # –¢–µ–∫—Å—Ç –¥–ª—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–µ—Ä–µ–≤–æ–¥)
        'flip': "ÁøªËΩ¨",
        'next': "‰∏ã‰∏Ä‰∏™",
        'all_cards_passed': "ÊÇ®Â∑≤ÈÄöËøáÊâÄÊúâÂç°ÁâáÔºÅ",
    },
    'ja': {
        'start_message': "„Åì„Çì„Å´„Å°„ÅØÔºÅË®ÄË™û„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö",
        'register_message': "„Åì„Çì„Å´„Å°„ÅØÔºÅ „Åæ„Å†ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Çà„ÅÜ„Åß„Åô„ÄÇ ÁôªÈå≤„Åô„Çã„Å´„ÅØ„ÄÅ‰∏ã„ÅÆ„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        'nickname_request': "„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö",
        'nickname_taken': "„Åì„ÅÆ„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÅØ„Åô„Åß„Å´‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ Âà•„ÅÆ„ÇÇ„ÅÆ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö",
        'password_request': "Ê¨°„Å´„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö",
        'registration_complete': "ÁôªÈå≤ÂÆå‰∫ÜÔºÅ",
        'main_menu': "„É°„Ç§„É≥„É°„Éã„É•„Éº",
        'start_learning': "‚úî Â≠¶Áøí„ÇíÈñãÂßã„Åô„Çã",
        'create_module': "‚úî Êñ∞„Åó„ÅÑ„É¢„Ç∏„É•„Éº„É´„Çí‰ΩúÊàê„Åô„Çã",
        'bot_info': "‚Ñπ „Éú„ÉÉ„ÉàÊÉÖÂ†±",
        'how_to_use': "üò¶ „Éú„ÉÉ„Éà„ÅÆ‰Ωø„ÅÑÊñπ",
        'my_account': "üëÄ ÁßÅ„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà",
        'back_to_main_menu': "‚¨Ö „É°„Ç§„É≥„É°„Éã„É•„Éº„Å´Êàª„Çã",
        'my_account_info': "„ÅÇ„Å™„Åü„ÅÆID - {}\n"
                           "----------------------\n"
                           "„Éã„ÉÉ„ÇØ„Éç„Éº„É† - {}\n"
                           "ÁôªÈå≤Êó• - {}\n"
                           "‰ΩúÊàê„Åï„Çå„Åü„Ç´„Éº„Éâ„ÅÆÊï∞ - {}\n"
                           "-------------------------\n"
                           "Ë©ï‰æ° - {}\n"
                           "„Éó„É¨„Éü„Ç¢„É†„ÅØ{}„Åæ„ÅßÊúâÂäπ„Åß„Åô",
        'how_to_use_info': "‰Ωø„ÅÑÊñπ„ÅØ„Åì„Å°„Çâ„Åß„Åô",
        'support': "„Çµ„Éù„Éº„Éà",
        'start_learning_message': "Á¥†Êô¥„Çâ„Åó„ÅÑ„ÄÅÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜ",
        'my_modules': "Ëá™ÂàÜ„ÅÆ„É¢„Ç∏„É•„Éº„É´„ÇíË°®Á§∫„Åô„Çã",
        'other_modules': "‰ªñ„ÅÆ„É¢„Ç∏„É•„Éº„É´„ÇíË°®Á§∫„Åô„Çã",
        'edit_modules_message': "„Åì„Åì„Å´‰Ωï„ÅãÊõ∏„ÅÑ„Å¶„ÅÇ„Çä„Åæ„Åô„Åå„ÄÅË™¨ÊòéÊõ∏„Å†„Åù„ÅÜ„Åß„Åô",
        'create_module': "Êñ∞„Åó„ÅÑ„É¢„Ç∏„É•„Éº„É´„Çí‰ΩúÊàê„Åô„Çã",
        'edit_existing_module': "Êó¢Â≠ò„ÅÆ„É¢„Ç∏„É•„Éº„É´„ÇíÁ∑®ÈõÜ„Åô„Çã",
        'bot_info_message': "„Åì„Åì„Å´ÊÉÖÂ†±„Åå„ÅÇ„Çä„Åæ„Åô",
        'change_language': "Ë®ÄË™û„ÇíÂ§âÊõ¥„Åô„Çã",
        'register': "ÁôªÈå≤",
        'change_nickname': "„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÇíÂ§âÊõ¥„Åô„Çã",
        'change_password': "„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂ§âÊõ¥„Åô„Çã",
        'get_premium': "„Éó„É¨„Éü„Ç¢„É†„ÇíÂÖ•Êâã„Åô„Çã",
        'activate_premium': "„Éó„É¨„Éü„Ç¢„É†„ÇíÊúâÂäπ„Å´„Åô„Çã",
        'enter_new_nickname': "ÁèæÂú®„ÅÆ„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÇíÂ§âÊõ¥„Åó„Åü„ÅÑ„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ - {}",
        'nickname_exists': "„Åì„ÅÆ„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÅØ„Åô„Åß„Å´Â≠òÂú®„Åó„Åæ„Åô„ÄÇÂà•„ÅÆ„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        'enter_old_password': "Ë∫´ÂÖÉ„ÇíÁ¢∫Ë™ç„Åô„Çã„Åü„ÇÅ„Å´Âè§„ÅÑ„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        'incorrect_password': "„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÈñìÈÅï„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ",
        'enter_new_password': "Êñ∞„Åó„ÅÑ„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        'premium_link': "https://t.me/telegram",
        'enter_premium_key': "„Ç¢„ÇØ„ÉÜ„Ç£„Éô„Éº„Ç∑„Éß„É≥„Ç≠„Éº„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        'invalid_premium_key': "‚ùå ÁÑ°Âäπ„Å™„Ç≠„Éº„Åß„Åô„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ",
        'nickname_changed': "„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÅåÊ≠£Â∏∏„Å´Â§âÊõ¥„Åï„Çå„Åæ„Åó„Åü",
        'password_changed': "„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÊ≠£Â∏∏„Å´Â§âÊõ¥„Åï„Çå„Åæ„Åó„Åü",
        'premium_activated': "„Éó„É¨„Éü„Ç¢„É†„ÅØ{}„Åæ„ÅßÊ≠£Â∏∏„Å´„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂåñ„Åï„Çå„Åæ„Åó„Åü",
        'premium_activated_message': "1„ÅãÊúàÈñì„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÅåÊúâÂäπ„Å´„Å™„Çä„Åæ„Åó„Åü",
        'select_original_language': "Â§ñÂõΩË™û„ÅÆÂçòË™û„ÇíË®òËø∞„Åô„ÇãË®ÄË™û„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        'select_translation_language': "„É¢„Ç∏„É•„Éº„É´ÂÜÖ„ÅÆÂçòË™û„ÇíÁøªË®≥„Åô„ÇãË®ÄË™û„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        'enter_module_name': "„É¢„Ç∏„É•„Éº„É´„ÅÆÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        'enter_module_description': "ÂøÖË¶Å„Å´Âøú„Åò„Å¶„ÄÅÊñ∞„Åó„ÅÑ„É¢„Ç∏„É•„Éº„É´„ÅÆË™¨Êòé„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        'skip_description': "„Çπ„Ç≠„ÉÉ„Éó",
        'description_too_long': "Ë™¨Êòé„ÅØ100ÊñáÂ≠ó‰ª•ÂÜÖ„Åß„Å™„Åë„Çå„Å∞„Å™„Çä„Åæ„Åõ„Çì„ÄÇ „ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ",
        'module_created_add_cards': "Á¥†Êô¥„Çâ„Åó„ÅÑ„ÄÅÊñ∞„Åó„ÅÑ„É¢„Ç∏„É•„Éº„É´„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü„ÄÇÂ≠¶ÁøíÁî®„ÅÆ„Ç´„Éº„Éâ„ÇíËøΩÂä†„Åó„Åæ„Åô„ÅãÔºü",
        'add_cards': "üíπ „Ç´„Éº„Éâ„ÇíËøΩÂä†",
        'enter_foreign_word': "Â§ñÂõΩË™û„ÅÆÂçòË™û„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ (ÊúÄÂ§ß 100 ÊñáÂ≠ó):",
        'enter_translation': "ÂçòË™û„ÅÆÁøªË®≥„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ (ÊúÄÂ§ß 100 ÊñáÂ≠ó):",
        'add_image_to_card': "„Åì„ÅÆ„Ç´„Éº„Éâ„Å´ÁîªÂÉè„ÇíËøΩÂä†„Åó„Åæ„Åô„ÅãÔºü",
        'skip': "„Çπ„Ç≠„ÉÉ„Éó",
        'add': "ËøΩÂä†ÔºÅ",
        'card_saved_add_next': "„Ç´„Éº„Éâ„ÅåÊ≠£Â∏∏„Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü„ÄÇÊ¨°„ÅÆ„Ç´„Éº„Éâ„ÇíËøΩÂä†„Åó„Åæ„Åô„Åã„ÄÅ„Åù„Çå„Å®„ÇÇ„É°„Ç§„É≥„É°„Éã„É•„Éº„Å´Êàª„Çä„Åæ„Åô„ÅãÔºü",
        'add_next_card': "Ê¨°„ÅÆ„Ç´„Éº„Éâ„ÇíËøΩÂä†",
        'invalid_image_format': "ÁÑ°Âäπ„Å™ÁîªÂÉèÂΩ¢Âºè„Åß„Åô„ÄÇ JPEG„Åæ„Åü„ÅØPNGÂΩ¢Âºè„ÅßÁîªÂÉè„ÇíÈÄÅ‰ø°„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        'module_name_request': "Ê§úÁ¥¢„Åô„Çã„É¢„Ç∏„É•„Éº„É´Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:",
        'no_modules_found': "È°û‰ºº„ÅÆÂêçÂâç„ÅÆ„É¢„Ç∏„É•„Éº„É´„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ",
        'modules_found': "Ë¶ã„Å§„Åã„Å£„Åü„É¢„Ç∏„É•„Éº„É´„ÅØ„Åì„Å°„Çâ„Åß„Åô:",
        'no_cards_in_module': "„Åì„ÅÆ„É¢„Ç∏„É•„Éº„É´„Å´„ÅØ„Åæ„Å†„Ç´„Éº„Éâ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ",
        'card_front': "{}",  # –¢–µ–∫—Å—Ç –¥–ª—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ)
        'card_back': "{}",  # –¢–µ–∫—Å—Ç –¥–ª—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–µ—Ä–µ–≤–æ–¥)
        'flip': "„Éï„É™„ÉÉ„Éó",
        'next': "Ê¨°„Å∏",
        'all_cards_passed': "„Åô„Åπ„Å¶„ÅÆ„Ç´„Éº„Éâ„ÇíÊ∏°„Åó„Åæ„Åó„ÅüÔºÅ",
    },
}


def generate_unique_module_id():
    while True:
        new_id = random.randint(100000000000000, 999999999999999)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        existing_module = session.query(Collection).filter_by(id=new_id).first()
        if not existing_module:
            return new_id


def get_text(language, key, *args):
    try:
        return texts.get(language, texts['ru']).get(key, '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω').format(*args)
    except Exception as e:
        print(f"Error formatting text: {e}")
        return texts.get(language, texts['ru']).get(key, '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')


def create_main_menu_keyboard(language):
    return [
        [Button.inline(get_text(language, 'start_learning'), data=b"start_learning")],
        [Button.inline(get_text(language, 'create_module'), data=b"create_module")],
        [Button.inline(get_text(language, 'bot_info'), data=b"bot_info"),
         Button.inline(get_text(language, 'how_to_use'), data=b"how_to_use")],
        [Button.inline(get_text(language, 'my_account'), data=b"my_account")]
    ]


def create_back_to_main_menu_keyboard(language):
    return [
        [Button.inline(get_text(language, 'back_to_main_menu'), data=b"back_to_main_menu")]
    ]


def create_learning_menu_keyboard(language):
    return [
        [Button.inline(get_text(language, 'my_modules'), data=b"my_modules")],
        [Button.inline(get_text(language, 'other_modules'), data=b"other_modules")],
        [Button.inline(get_text(language, 'back_to_main_menu'), data=b"back_to_main_menu")]
    ]


def create_edit_modules_keyboard(language):
    return [
        [Button.inline(get_text(language, 'create_module'), data=b"create_module")],
        [Button.inline(get_text(language, 'edit_existing_module'), data=b"edit_existing_module")],
        [Button.inline(get_text(language, 'back_to_main_menu'), data=b"back_to_main_menu")]
    ]


def create_language_selection_keyboard():
    return [
        [Button.inline("üá∑üá∫ –†—É—Å—Å–∫–∏–π", data=b"lang_ru"), Button.inline("üá¨üáß English", data=b"lang_en")],
        [Button.inline("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", data=b"lang_uk"), Button.inline("üáµüá± Polski", data=b"lang_pl")],
        [Button.inline("üá®üá≥ ‰∏≠Êñá", data=b"lang_zh"), Button.inline("üáØüáµ Êó•Êú¨Ë™û", data=b"lang_ja")]
    ]


def create_my_account_keyboard(language):
    return [
        [
            Button.inline(get_text(language, 'change_nickname'), data=b"change_nickname"),
            Button.inline(get_text(language, 'change_password'), data=b"change_password")
        ],
        [
            Button.url(get_text(language, 'get_premium'), url='https://t.me/telegram'),
            Button.inline(get_text(language, 'activate_premium'), data=b"activate_premium")
        ],
        [
            Button.inline(get_text(language, 'change_language'), data=b"change_language")
        ],
        create_back_to_main_menu_keyboard(language)[0]
    ]


# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
def create_language_selection_keyboard_with_back():
    keyboard = create_language_selection_keyboard()
    keyboard.append([Button.inline("‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", data=b"back_to_main_menu")])
    return keyboard


def create_add_cards_keyboard(language):
    return [
        [Button.inline(get_text(language, 'add_cards'), data=b"add_cards_action")],
        create_back_to_main_menu_keyboard(language)[0]
    ]


def create_add_image_keyboard(language):
    return [
        [Button.inline(get_text(language, 'skip'), data=b"skip_image"),
         Button.inline(get_text(language, 'add'), data=b"add_image")]
    ]


def create_card_saved_keyboard(language):
    return [
        [Button.inline(get_text(language, 'add_next_card'), data=b"add_next_card_action")],
        create_back_to_main_menu_keyboard(language)[0]
    ]


def create_module_keyboard(language, module_id):
    return [
        [Button.inline(get_text(language, 'flip'), data=f"flip_{module_id}")],
        [Button.inline(get_text(language, 'next'), data=f"next_{module_id}")],
        [Button.inline(get_text(language, 'back_to_main_menu'), data=b"back_to_main_menu")]
    ]


@client.on(events.CallbackQuery(data=b"my_account"))
async def my_account_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'

    user_bot = session.query(UserBot).filter_by(id=user_id).first()

    if not user_bot:
        await event.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return

    nick = user_bot.nick
    date = user_tg.date.strftime("%d.%m.%Y") if user_tg.date else "0"
    count_of_cards = user_bot.count_of_cards

    reviews = session.query(Review).filter_by(id_to=user_id).all()
    if reviews:
        total_score = sum(review.score for review in reviews)
        rating = round(total_score / len(reviews), 2)
    else:
        rating = "0"

    premium_date = user_bot.premium.strftime("%d.%m.%Y") if user_bot.premium else "0"

    account_info = get_text(language, 'my_account_info', user_id, nick, date, count_of_cards, rating, premium_date)

    await client.edit_message(event.chat_id, event.message_id, account_info,
                              buttons=create_my_account_keyboard(language), file=MY_ACC_IMG_PATH)


@client.on(events.CallbackQuery(data=b"change_language"))
async def change_language_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    await event.edit(get_text(language, 'change_language'), buttons=create_language_selection_keyboard())


@client.on(events.CallbackQuery(pattern=b"lang_.*"))
async def language_selection_handler(event):
    user_id = event.sender_id
    language = event.data.decode('utf-8').split('_')[1]
    user_tg = session.query(UserTg).filter_by(id=user_id).first()

    if not user_tg:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, —Å–æ–∑–¥–∞–µ–º
        user_tg = UserTg(id=user_id, username=event.sender.username or "NO_USERNAME", date=datetime.datetime.now())
        session.add(user_tg)
        session.commit()

    user_tg.language = language
    session.commit()

    user_bot = session.query(UserBot).filter_by(id=user_id).first()
    if user_bot:
        await send_main_menu(event)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        await client.send_message(event.chat_id, get_text(language, 'register_message'),
                                  buttons=[[Button.inline(get_text(language, 'register'), data=b"Register")]])


@client.on(events.CallbackQuery(pattern=b"module_lang_.*"))
async def module_language_selection_handler(event):
    user_id = event.sender_id
    language_code = event.data.decode('utf-8').split('_')[2]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥ —è–∑—ã–∫–∞
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if user_id in module_creation_state:
        if module_creation_state[user_id]["state"] == "waiting_for_original_language":
            module_creation_state[user_id]["lang1"] = language_codes.get(language_code, language_code)
            module_creation_state[user_id]["state"] = "waiting_for_translation_language"

            await event.edit(get_text(language, 'select_translation_language'),
                             buttons=[
                                 [Button.inline("üá∑üá∫ –†—É—Å—Å–∫–∏–π", data=b"module_lang_ru"),
                                  Button.inline("üá¨üáß English", data=b"module_lang_en")],
                                 [Button.inline("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", data=b"module_lang_uk"),
                                  Button.inline("üáµüá± Polski", data=b"module_lang_pl")],
                                 [Button.inline("üá®üá≥ ‰∏≠Êñá", data=b"module_lang_zh"),
                                  Button.inline("üáØüáµ Êó•Êú¨Ë™û", data=b"module_lang_ja")],
                                 [Button.inline("‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", data=b"back_to_main_menu")]
                             ])


        elif module_creation_state[user_id]["state"] == "waiting_for_translation_language":
            module_creation_state[user_id]["lang2"] = language_codes.get(language_code, language_code)
            module_creation_state[user_id]["state"] = "waiting_for_module_name"

            await event.edit(get_text(language, 'enter_module_name'),
                             buttons=create_back_to_main_menu_keyboard(language))


@client.on(events.CallbackQuery(data=b"start_learning"))
async def start_learning_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    await client.edit_message(event.chat_id, event.message_id, get_text(language, 'start_learning_message'),
                              buttons=create_learning_menu_keyboard(language), file=STARS_LEARN_IMG_PATH)


@client.on(events.CallbackQuery(data=b"how_to_use"))
async def how_to_use_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    await client.edit_message(event.chat_id, event.message_id, get_text(language, 'how_to_use_info'),
                              buttons=[[Button.url(get_text(language, 'support'), url='https://t.me/telegram')],
                                       create_back_to_main_menu_keyboard(language)[0]], file=HOW_TO_USE_IMG_PATH)


@client.on(events.CallbackQuery(data=b"create_module"))
async def edit_modules_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    await client.edit_message(event.chat_id, event.message_id, get_text(language, 'edit_modules_message'),
                              buttons=create_edit_modules_keyboard(language), file=CREATE_NEW_IMG_PATH)


@client.on(events.CallbackQuery(data=b"add_cards_action"))  # –ò–∑–º–µ–Ω–µ–Ω–æ data
async def add_cards_action_handler(event):  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'

    if user_id in card_creation_state:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        card_creation_state[user_id]["state"] = "waiting_for_foreign_word"
        # await event.edit(event.chat_id, event.message_id, get_text(language, 'enter_foreign_word')) #  –ó–∞–º–µ–Ω–µ–Ω–æ
        await client.send_message(event.chat_id, get_text(language, 'enter_foreign_word'))  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


@client.on(events.CallbackQuery(data=b"bot_info"))
async def bot_info_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    await client.edit_message(event.chat_id, event.message_id, get_text(language, 'bot_info_message'),
                              buttons=create_back_to_main_menu_keyboard(language), file=INFO_IMG_PATH)


@client.on(events.CallbackQuery(data=b"back_to_main_menu"))
async def back_to_main_menu_handler(event):
    await send_main_menu(event)


async def send_main_menu(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    await client.edit_message(event.chat_id, event.message_id, get_text(language, 'main_menu'),
                              buttons=create_main_menu_keyboard(language), file=MAIN_MENU_IMG_PATH)


registration_state = {}
change_nickname_state = {}
change_password_state = {}
activate_premium_state = {}
password_required_after_menu = {}

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è
module_creation_state = {}

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
card_creation_state = {}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–¥—É–ª–µ–π
module_view_state = {}

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∏—Ö –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
card_message_ids = {}

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –∫–æ–¥–æ–≤
language_codes = {
    'ru': 'ru',
    'en': 'en',
    'uk': 'ukr',
    'pl': 'pol',
    'zh': 'chin',
    'ja': 'jap'
}


@client.on(events.CallbackQuery(data=b"create_module"))
async def create_module_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è
    module_creation_state[user_id] = {"state": "waiting_for_original_language"}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await event.edit(get_text(language, 'select_original_language'),
                     buttons=[
                         [Button.inline("üá∑üá∫ –†—É—Å—Å–∫–∏–π", data=b"module_lang_ru"),
                          Button.inline("üá¨üáß English", data=b"module_lang_en")],
                         [Button.inline("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", data=b"module_lang_uk"),
                          Button.inline("üáµüá± Polski", data=b"module_lang_pl")],
                         [Button.inline("üá®üá≥ ‰∏≠Êñá", data=b"module_lang_zh"),
                          Button.inline("üáØüáµ Êó•Êú¨Ë™û", data=b"module_lang_ja")],
                         [Button.inline("‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", data=b"back_to_main_menu")]
                     ])


@client.on(events.CallbackQuery(pattern=b"lang_.*"))
async def language_selection_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    selected_language = event.data.decode('utf-8').split('_')[1]

    if user_id in module_creation_state:
        if module_creation_state[user_id]["state"] == "waiting_for_original_language":
            module_creation_state[user_id]["lang1"] = language_codes.get(selected_language, selected_language)
            module_creation_state[user_id]["state"] = "waiting_for_translation_language"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
            await client.edit_message(event.chat_id, event.message_id,
                                      get_text(language, 'select_translation_language'),
                                      buttons=create_language_selection_keyboard_with_back())

        elif module_creation_state[user_id]["state"] == "waiting_for_translation_language":
            module_creation_state[user_id]["lang2"] = language_codes.get(selected_language, selected_language)
            module_creation_state[user_id]["state"] = "waiting_for_module_name"

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
            await event.edit(event.chat_id, event.message_id, get_text(language, 'enter_module_name'),
                             buttons=create_back_to_main_menu_keyboard(language))

    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞ –±–æ—Ç–∞)
        user_tg = session.query(UserTg).filter_by(id=user_id).first()
        if user_tg:
            user_tg.language = selected_language
            session.commit()
            user_bot = session.query(UserBot).filter_by(id=user_id).first()

            if user_bot:
                await send_main_menu(event)
            else:
                await client.edit_message(event.chat_id, event.message_id, get_text(language, 'register_message'),
                                          buttons=[[Button.inline(get_text(language, 'register'), data=b"Register")]])


@client.on(events.NewMessage)
async def handle_messages(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    text = event.text

    if user_id in registration_state:
        if registration_state[user_id] == "waiting_for_nickname":
            existing_user = session.query(UserBot).filter_by(nick=text).first()
            if existing_user:
                await event.respond(get_text(language, 'nickname_taken'))
                return

            registration_state[user_id] = {"nickname": text,
                                           "state": "waiting_for_password"}

            await event.respond(get_text(language, 'password_request'))

        elif registration_state[user_id].get("state") == "waiting_for_password":
            is_strong, message = is_password_strong(text)
            if not is_strong:
                await event.respond(
                    f"–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: {message} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è:")
                return

            hashed_password = hash_password(text)

            new_user_bot = UserBot(id=user_id, nick=registration_state[user_id]["nickname"],
                                   pass_hash=hashed_password)
            session.add(new_user_bot)
            session.commit()

            del registration_state[user_id]

            language = user_tg.language  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await send_main_menu_new_message(event)

    elif user_id in change_nickname_state:
        if change_nickname_state[user_id] == "waiting_for_new_nickname":
            existing_user = session.query(UserBot).filter_by(nick=text).first()
            if existing_user:
                await event.respond(get_text(language, 'nickname_exists'))
                return

            user_bot = session.query(UserBot).filter_by(id=user_id).first()
            user_bot.nick = text
            session.commit()

            del change_nickname_state[user_id]

            await event.respond(get_text(language, 'nickname_changed'),
                                buttons=create_back_to_main_menu_keyboard(language))

    elif user_id in change_password_state:
        if change_password_state[user_id] == "waiting_for_old_password":
            user_bot = session.query(UserBot).filter_by(id=user_id).first()
            hashed_password = hash_password(text)

            if user_bot.pass_hash != hashed_password:
                await event.respond(get_text(language, 'incorrect_password'))
                return

            change_password_state[user_id] = "waiting_for_new_password"
            password_required_after_menu[user_id] = True
            await event.respond(get_text(language, 'enter_new_password'))

        elif change_password_state[user_id] == "waiting_for_new_password":
            is_strong, message = is_password_strong(text)
            if not is_strong:
                await event.respond(
                    f"–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: {message} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è:")
                return

            new_hashed_password = hash_password(text)
            user_bot = session.query(UserBot).filter_by(id=user_id).first()
            user_bot.pass_hash = new_hashed_password
            session.commit()

            # del change_password_state[user_id]
            # password_required_after_menu[user_id] = False

            await event.respond(get_text(language, 'password_changed'),
                                buttons=create_back_to_main_menu_keyboard(language))

    elif user_id in activate_premium_state:
        if activate_premium_state[user_id] == "waiting_for_premium_key":
            with open('keys.txt', 'r') as f:
                keys = [line.strip() for line in f]

            if text in keys:
                user_bot = session.query(UserBot).filter_by(id=user_id).first()
                premium_expiration_date = datetime.datetime.now() + datetime.timedelta(days=30)
                user_bot.premium = premium_expiration_date
                session.commit()

                keys.remove(text)
                with open('keys.txt', 'w') as f:
                    for key in keys:
                        f.write(key + '\n')

                del activate_premium_state[user_id]

                await event.respond(get_text(language, 'premium_activated_message'),
                                    buttons=create_back_to_main_menu_keyboard(language))
            else:
                # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
                await event.respond(get_text(language, 'invalid_premium_key'),
                                    buttons=create_back_to_main_menu_keyboard(language))

    elif user_id in module_creation_state:
        if module_creation_state[user_id]["state"] == "waiting_for_module_name":
            module_creation_state[user_id]["name"] = text
            module_creation_state[user_id]["state"] = "waiting_for_module_description"

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥
            await event.respond(get_text(language, 'enter_module_description'),
                                buttons=[
                                    [Button.inline(get_text(language, 'skip_description'), data=b"skip_description")]])

        elif module_creation_state[user_id]["state"] == "waiting_for_module_description":
            if len(text) <= 100:
                module_creation_state[user_id]["description"] = text

                # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                new_module = Collection(
                    id=generate_unique_module_id(),  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
                    owner=user_id,
                    name=module_creation_state[user_id]["name"],
                    descript=module_creation_state[user_id]["description"],
                    lang1=module_creation_state[user_id]["lang1"],
                    lang2=module_creation_state[user_id]["lang2"]
                )
                session.add(new_module)
                session.commit()

                module_id = new_module.id  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è
                del module_creation_state[user_id]

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –º–æ–¥—É–ª—å
                await event.respond(get_text(language, 'module_created_add_cards'),
                                    buttons=create_add_cards_keyboard(language))

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
                card_creation_state[user_id] = {"state": "idle", "module_id": module_id}
            else:
                # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                await event.respond(get_text(language, 'description_too_long'))

    elif user_id in card_creation_state:
        if card_creation_state[user_id]["state"] == "waiting_for_foreign_word":
            foreign_word = text[:100]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
            card_creation_state[user_id]["foreign_word"] = foreign_word
            card_creation_state[user_id]["state"] = "waiting_for_translation"
            await event.respond(get_text(language, 'enter_translation'))

        elif card_creation_state[user_id]["state"] == "waiting_for_translation":
            translation = text[:100]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
            card_creation_state[user_id]["translation"] = translation
            card_creation_state[user_id]["state"] = "waiting_for_image_choice"
            await event.respond(get_text(language, 'add_image_to_card'),
                                buttons=create_add_image_keyboard(language))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    elif user_id in module_view_state and module_view_state[user_id]['state'] == 'waiting_for_module_name':
        search_term = text.strip().lower()
        modules = session.query(Collection).filter(
            Collection.name.like(f"%{search_term}%")
        ).all()

        if modules:
            module_buttons = [[Button.inline(module.name, data=f"view_module_{module.id}")] for module in modules]
            module_buttons.append(create_back_to_main_menu_keyboard(language)[0])
            await event.respond(get_text(language, 'modules_found'), buttons=module_buttons)
        else:
            await event.respond(get_text(language, 'no_modules_found'),
                                buttons=create_back_to_main_menu_keyboard(language))

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del module_view_state[user_id]


async def send_main_menu_new_message(event):  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    await client.send_file(event.chat_id, MAIN_MENU_IMG_PATH, caption=get_text(language, 'main_menu'),
                           buttons=create_main_menu_keyboard(language))


@client.on(events.CallbackQuery(data=b"skip_description"))
async def skip_description_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'

    if user_id in module_creation_state and module_creation_state[user_id]["state"] == "waiting_for_module_description":
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—É—Å—Ç—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        new_module = Collection(
            id=generate_unique_module_id(),  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
            owner=user_id,
            name=module_creation_state[user_id]["name"],
            descript="",  # –ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            lang1=module_creation_state[user_id]["lang1"],
            lang2=module_creation_state[user_id]["lang2"]
        )
        session.add(new_module)
        session.commit()

        module_id = new_module.id  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è
        del module_creation_state[user_id]

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –º–æ–¥—É–ª—å
        await event.respond(get_text(language, 'module_created_add_cards'),
                            buttons=create_add_cards_keyboard(language))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
        card_creation_state[user_id] = {"state": "idle", "module_id": module_id}


@client.on(events.CallbackQuery(data=b"change_nickname"))
async def change_nickname_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    user_bot = session.query(UserBot).filter_by(id=user_id).first()
    if not user_bot:
        await event.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return

    nickname = user_bot.nick
    change_nickname_state[user_id] = "waiting_for_new_nickname"
    await event.respond(get_text(language, 'enter_new_nickname', nickname),
                        buttons=create_back_to_main_menu_keyboard(language))


@client.on(events.CallbackQuery(data=b"change_password"))
async def change_password_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    change_password_state[user_id] = "waiting_for_old_password"
    await event.respond(get_text(language, 'enter_old_password'),
                        buttons=create_back_to_main_menu_keyboard(language))


@client.on(events.CallbackQuery(data=b"activate_premium"))
async def activate_premium_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    activate_premium_state[user_id] = "waiting_for_premium_key"
    await event.respond(get_text(language, 'enter_premium_key'),
                        buttons=create_back_to_main_menu_keyboard(language))


@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    user_id = event.sender_id
    username = event.sender.username or "NO_USERNAME"

    user_tg = session.query(UserTg).filter_by(id=user_id).first()

    if not user_tg:
        new_user_tg = UserTg(id=user_id, username=username, date=datetime.datetime.now())
        session.add(new_user_tg)
        session.commit()
        print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –¥–æ–±–∞–≤–ª–µ–Ω: {user_id}, @{username}")
        await event.respond(get_text('ru', 'start_message'), buttons=create_language_selection_keyboard())
    else:
        language = user_tg.language
        user_bot = session.query(UserBot).filter_by(id=user_id).first()
        if user_bot:
            if user_id in password_required_after_menu and password_required_after_menu[user_id]:
                await event.respond(get_text(language, 'enter_new_password'))
            else:
                await send_main_menu(event)
        else:
            await event.respond(get_text(language, 'register_message'),
                                buttons=[[Button.inline(get_text(language, 'register'), data=b"Register")]])


@client.on(events.CallbackQuery(data=b"Register"))
async def registration_button(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'
    registration_state[user_id] = "waiting_for_nickname"
    await event.respond(get_text(language, 'nickname_request'))


@client.on(events.CallbackQuery(data=b"skip_image"))
async def skip_image_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'

    if user_id in card_creation_state and card_creation_state[user_id]["state"] == "waiting_for_image_choice":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        module_id = card_creation_state[user_id]["module_id"]
        foreign_word = card_creation_state[user_id]["foreign_word"]
        translation = card_creation_state[user_id]["translation"]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1
        last_card = session.query(Card).order_by(Card.id.desc()).first()
        new_card_id = last_card.id + 1 if last_card else 1

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        new_card = Card(
            id=new_card_id,
            name=foreign_word,
            translation=translation,
            collection=module_id,
            image_path=None  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        )
        session.add(new_card)
        session.commit()

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        card_creation_state[user_id]["state"] = "idle"
        del card_creation_state[user_id]["foreign_word"]
        del card_creation_state[user_id]["translation"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é
        await client.edit_message(event.chat_id, event.message_id, get_text(language, 'card_saved_add_next'),
                                  buttons=create_card_saved_keyboard(language))


@client.on(events.CallbackQuery(data=b"add_image"))
async def add_image_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'

    if user_id in card_creation_state and card_creation_state[user_id]["state"] == "waiting_for_image_choice":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        card_creation_state[user_id]["state"] = "waiting_for_image"
        await client.edit_message(event.chat_id, event.message_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏.")


@client.on(events.NewMessage(pattern=None, func=lambda e: e.photo or e.document))
async def image_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'

    if user_id in card_creation_state and card_creation_state[user_id]["state"] == "waiting_for_image":
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            module_id = card_creation_state[user_id]["module_id"]
            foreign_word = card_creation_state[user_id]["foreign_word"]
            translation = card_creation_state[user_id]["translation"]

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1
            last_card = session.query(Card).order_by(Card.id.desc()).first()
            new_card_id = last_card.id + 1 if last_card else 1
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            await client.send_message(event.chat_id, get_text(language, 'card_saved_add_next'),
                                      buttons=create_card_saved_keyboard(language))

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            if event.photo:
                image_data = await event.download_media(bytes)
                file_name = f"{new_card_id}.jpg"
            elif event.document:
                if event.document.mime_type not in ['image/jpeg', 'image/png']:
                    await event.respond(get_text(language, 'invalid_image_format'))
                    return

                image_data = await event.download_media(bytes)
                file_name = f"{new_card_id}.jpg"

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥—É–ª—è, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            module_folder = os.path.join(CARDS_FOLDER, str(module_id))
            if not os.path.exists(module_folder):
                os.makedirs(module_folder)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG
            image_path = os.path.join(module_folder, file_name)
            image = Image.open(io.BytesIO(image_data))
            image = image.convert("RGB")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGB, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            image.save(image_path, "JPEG")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            new_card = Card(
                id=new_card_id,
                name=foreign_word,
                translation=translation,
                collection=module_id,
                image_path=image_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            )
            session.add(new_card)
            session.commit()

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            card_creation_state[user_id]["state"] = "idle"
            del card_creation_state[user_id]["foreign_word"]
            del card_creation_state[user_id]["translation"]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é
            await client.edit_message(event.chat_id, event.message_id, get_text(language, 'card_saved_add_next'),
                                      buttons=create_card_saved_keyboard(language))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")


@client.on(events.CallbackQuery(data=b"add_next_card_action"))  # –ò–∑–º–µ–Ω–µ–Ω–æ data
async def add_next_card_action_handler(event):  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'

    if user_id in card_creation_state:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        card_creation_state[user_id]["state"] = "waiting_for_foreign_word"
        await client.send_message(event.chat_id, get_text(language, 'enter_foreign_word'))  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–¥—É–ª–µ–π –∏ –∫–∞—Ä—Ç–æ—á–µ–∫
@client.on(events.CallbackQuery(data=b"my_modules"))
async def my_modules_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'

    modules = session.query(Collection).filter_by(owner=user_id).all()

    if modules:
        module_buttons = [[Button.inline(module.name, data=f"view_module_{module.id}")] for module in modules]
        module_buttons.append(create_back_to_main_menu_keyboard(language)[0])
        await client.edit_message(event.chat_id, event.message_id, "–í–∞—à–∏ –º–æ–¥—É–ª–∏:", buttons=module_buttons)
    else:
        await client.edit_message(event.chat_id, event.message_id,
                                  "üòØ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–æ–¥—É–ª–µ–π.\n\n–ù–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ, –≤—ã–π–¥—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                                  buttons=create_back_to_main_menu_keyboard(language))


@client.on(events.CallbackQuery(data=b"other_modules"))
async def other_modules_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
    module_view_state[user_id] = {'state': 'waiting_for_module_name'}
    await client.edit_message(event.chat_id, event.message_id, get_text(language, 'module_name_request'),
                              buttons=create_back_to_main_menu_keyboard(language))


@client.on(events.CallbackQuery(pattern=r"view_module_(\d+)"))
async def view_module_handler(event):
    user_id = event.sender_id
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'

    module_id = int(event.data.decode('utf-8').split('_')[2])
    module = session.query(Collection).filter_by(id=module_id).first()

    if not module:
        await event.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    cards = session.query(Card).filter_by(collection=module_id).all()

    if not cards:
        await client.edit_message(event.chat_id, event.message_id, get_text(language, 'no_cards_in_module'),
                                  buttons=create_back_to_main_menu_keyboard(language))
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
    module_view_state[user_id] = {
        'module_id': module_id,
        'cards': cards,
        'current_card_index': 0,
        'card_face': 'front',  # 'front' –∏–ª–∏ 'back'
        'message_id': None  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π
    }

    await show_card(event, user_id)


async def show_card(event, user_id):
    user_tg = session.query(UserTg).filter_by(id=user_id).first()
    language = user_tg.language if user_tg else 'ru'

    state = module_view_state[user_id]
    module_id = state['module_id']
    cards = state['cards']
    current_card_index = state['current_card_index']
    card_face = state['card_face']
    message_id = state['message_id']

    if current_card_index >= len(cards):
        # –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏
        if message_id:
            try:
                await client.delete_messages(event.chat_id, message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await client.send_message(event.chat_id, get_text(language, 'all_cards_passed'),
                                  buttons=create_back_to_main_menu_keyboard(language))  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        del module_view_state[user_id]
        return

    card = cards[current_card_index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if card_face == 'front':
        text = get_text(language, 'card_front', card.name)
    else:
        text = get_text(language, 'card_back', card.translation)

    keyboard = create_module_keyboard(language, module_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π
    try:
        image_path = card.image_path if card.image_path else NON_IMAGE_PATH
        if message_id:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.edit_message(event.chat_id, message_id, text, buttons=keyboard, file=image_path)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
            sent_message = await client.send_file(event.chat_id, image_path, caption=text, buttons=keyboard)
            module_view_state[user_id]['message_id'] = sent_message.id

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        await event.respond(text, buttons=keyboard)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ


@client.on(events.CallbackQuery(pattern=r"flip_(\d+)"))
async def flip_card_handler(event):
    user_id = event.sender_id

    if user_id in module_view_state:
        state = module_view_state[user_id]
        if state['card_face'] == 'front':
            state['card_face'] = 'back'
        else:
            state['card_face'] = 'front'
        await show_card(event, user_id)


@client.on(events.CallbackQuery(pattern=r"next_(\d+)"))
async def next_card_handler(event):
    user_id = event.sender_id

    if user_id in module_view_state:
        state = module_view_state[user_id]
        state['current_card_index'] += 1
        state['card_face'] = 'front'
        await show_card(event, user_id)


async def main():
    await client.start(bot_token=BOT_TOKEN)
    await client.run_until_disconnected()


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    finally:
        loop.close()
